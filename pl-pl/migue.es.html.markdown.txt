tablas #

# Esta es una matriz
array = [1, 2, 3, 4, 5] # => [1, 2, 3, 4, 5]

# Las matrices pueden contener diferentes tipos de datos

[1, hey', falsa] # => [1, "hey" falsa]

# Las matrices pueden ser indexados
Desde el principio #
array [0] = #> 1
tablica.first # => 1
array [12] # => nil

# Al igual que el acceso a través de la aritmética [variable]
# Es sólo la sintaxis más legible
Método para disparar # [] en el objeto
pizarra. [] # 0 => 1
pizarra. [] 12 = #> nil

Desde el final de #
array [-1] # => 5
tablica.last # => 5

# Con la puesta en índice y longitud
array [2, 3] # => [3, 4, 5]

# Matriz inversa
a = [1,2,3]
a.reverse! # => [3.2.1]

O rango #
array [1..3] # => [2, 3, 4]

# La adición a la placa de tal manera
<< junta 6 # => [1, 2, 3, 4, 5, 6]
O un #
tablica.push (6) # => [1, 2, 3, 4, 5, 6]

# Comprobación de si la matriz contiene un elemento
tablica.include (1) # => true

Los valores hash # Ruby'owymi diccionarios básicos de pares clave / valor son.
Los valores hash # se guardan con los apoyos
de hash = { 'color' => 'verde', 'número' => 5}

hasz.keys # => [ 'color', 'número']

# Se puede comprobar rápidamente el contenido del hash utilizando las teclas:
desmenuzar [ 'color'] = #> 'verde'
hash de [ 'número'] = #> 5

# Compruebe los valores de una llave vuelve inexistente nula:
el hash [ 'aquí no hay nada'] # => nil