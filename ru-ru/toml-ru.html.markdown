---
language: toml
lang: ru-ru
filename: learntoml-ru.toml
contributors:
  - ["Alois de Gouvello", "https://github.com/aloisdg"]
translators:
  - ["Alexey Nazaroff", "https://github.com/rogaven"]
---

TOML расшифровывается как Очевидно Минималистичный Язык Томаса (Tom's Obvious,
Minimal Language). Это язык с очевидной семантикой, легкий для чтения и отлично
подходящий для конфигурационных файлов.

TOML является альтернативой таким форматам как YAML и JSON. Основной идеей было
сделать язык более понятным для человека, чем JSON, и проще, чем YAML, по структуре.
При этом он должен однозначно отображаться в хеш-таблицу и легко представляться
в виде базовых структур данных в большом количество языков программирования.      

Имейте в виду, что спецификация TOML всё ещё меняется. До тех пор, пока версия
не достигнет 1.0 следует считать, что она нестабильна.
Этот документ соответствует TOML v0.4.0.

```toml
# Так выглядят комментарии в TOML.

##################
# СКАЛЯРНЫЕ ТИПЫ #
##################

# Наш корневой объект (по сути, весь этот документ) это ассоциативный массив,
# эквивалентный словарю, хэшу или объекту в разных языках программирования.

# Ключ, знак равно и значение должны быть на одной строке.
# (Хотя некоторые значения могут быть разбиты на несколько строк)
key = "значение"
string = "привет"
number = 42
float = 3.14
boolean = true
dateTime = 1979-05-27T07:32:00-08:00
scientificNotation = 1e+12
"ключ может быть в кавычках" = true # Допускаются как двойные кавычки ("),
                                    # так одинарные (')
"ключ может содержать" = "бувы, числа, нижние подчеркивания (_) и минусы (-)"

# Ключ не может быть пустым, но допускается пустая строка в кавычках
"" = "пустая строка"     # ДОПУСТИМО, но не рекомендуется
'' = 'пустая строка'     # ДОПУСТИМО, но не рекомендуется

##########
# Строки #
##########

# Все строки должны содержать только UTF-8 символы.
# Символы могут быть экранированые с помощью обратного слеша (\).
# Например, \t добавляет табуляцию. Посмотрите в спецификации остальные.
basicString = "[обычная строка] окружена двойными кавычками. \"Цитата\". Имя\tСтатус"

multiLineString = """
[строка с переносами] окружена тремя двойными кавычками с каждой стороны.
Да, как вы уже заметили, тут могут быть переносы строки
"""

literalString = '[строка без форматирования] в одинарных кавычках. Экранирование не допускается.'

multiLineLiteralString = '''
Так же как и в варианте с переносами выше, в этой строке мы можем использовать
переносы строк. Но так как строка, окружена тремя одинарными кавычками – экранирование,
соответственно, не допускается.
PS. Первый перенос будет обрезан (тот, что после 3х кавычек), но остальные
      оступы сохранятся
      в таком же виде
'''

# Для бинарных данных рекомендуется использовать Base64 или любые другие кодировки.
# Обработка таких значений будет оставлена на усмотрение приложений.

#########
# Числа #
#########

## Числа могут начинаться с цифры, знака плюс (+) и знака минус (-)
## Ведущий ноль не разрешен. Так же как и шестнадцатеричная, восмьмеричная и бинарная записи.
## Математические операции не допустимы.
int1 = +42
int2 = 0
int3 = -21
integerRange = 64

## Для читабельности можно разделять цифры знаком подчериквания. Между двумя
## подчеркиваниями должна быть хотя бы одна цифра.
int4 = 5_349_221
int5 = 1_2_3_4_5     # ДОПУСТИМО, но не рекомендуется

#################
# Дробные числа #
#################

flt1 = 3.1415

# Допускается также запись в экспоненциальном виде
flt2 = -5e6
flt3 = 6.626E-34

################
# Булевые типы #
################

# Ключевые слова true и false должны быть в нижнем регистре
bool1 = true
bool2 = false

################
# Дата и время #
################

date1 = 1979-05-27T07:32:00Z # дата в RFC 3339
date2 = 1979-05-27T07:32:00 # без отступа
date3 = 1979-05-27 # без отступа и времени

#############
# КОЛЛЕКЦИИ #
#############

###########
# Массивы #
###########

array1 = [ 1, 2, 3 ]
array2 = [ "Запятые", "это", "разделители" ]
array3 = [ "Не смешивай", "разные", "типы" ]
array4 = [ [ 1.2, 2.4 ], ["все", 'строки', """одного""", '''типа'''] ]
array5 = [
  "Отступы", "будут", "проигнорированы"
]

###########
# Таблицы #
###########

# Таблицы (или хэш-таблицы/словари) это коллекции пар ключ/значение.
# Они записываются в квадратных скобках. Пустые таблицы допустимы.
[table]

# Ниже и до следующей таблицы или конца файла располагаются пары ключ/значение.
# Порядок в котором они будут находится в таблице не гарантирован.
[table-1]
key1 = "какая-то строка"
key2 = 123

[table-2]
key1 = "еще строка"
key2 = 456

# Можно использовать точки (.) для создания вложенных таблиц. Правила записи
# подразделов такие же как и для ключей.
[dog."tater.man"]
type = "мопс"

# Соответствует следующему коду в JSON:
# { "dog": { "tater.man": { "type": "мопс" } } }

# Отступы вокруг точек игнорируются, однако лучше их просто не ставить
[a.b.c]            # рекомендованная запись
[ d.e.f ]          # так же как и [d.e.f]
[ j . "ʞ" . 'l' ]  # аналогично [j."ʞ".'l']

# Вы можете не указывать родительские таблицы, если не хотите. TOML знает как
# это сделать за вас
# [x] вам
# [x.y] не
# [x.y.z] нужно писать всё это
[x.y.z.w] # чтобы вот это заработало

# Можно делать даже так
[a.b]
c = 1

[a]
d = 2

# Вы не можете объявить ключ или таблицу с одинаковым именем дважды. Это неправильно.

# НЕ ДЕЛАЙТЕ ТАК
[a]
b = 1

[a]
c = 2

# И ТАК НЕ ДЕЛАЙТЕ ТОЖЕ
[a]
b = 1

[a.b]
c = 2

# Все имена таблиц должны быть непустыми.
[]     # НЕДОПУСТИМО
[a.]   # НЕДОПУСТИМО
[a..b] # НЕДОПУСТИМО
[.b]   # НЕДОПУСТИМО
[.]    # НЕДОПУСТИМО

######################
# Встроенные таблицы #
######################

# Такие таблицы должны быть окружены фигурными скобками
inlineTables = { areEnclosedWith = "{ и }", mustBeInline = true }
point = { x = 1, y = 2 }

#################
# Массив таблиц #
#################

# Массивы таблиц описываются с помощью двух квадратных скобок вокруг имени таблицы.
# Каждая таблица с одинаковым именем будет элементом массива. Элементы вставляются
# в порядке их появления в документе

[[products]]
name = "массив таблиц"
sku = 738594937
emptyTableAreAllowed = true

[[products]] # Пустые таблицы разрешены

[[products]]
name = "Лак"
sku = 284758393
color = "серый"

# Вы также можете создавать вложенные массивы таблиц. Каждая подтаблица
# в двойных скобках будет принадлежать ближайшему верхнему элементу таблицы

[[fruit]]
  name = "яблоко"

  [fruit.Geometry]
    shape = "круглый"
    note = "Свойство фрукта"

  [[fruit.color]]
    name = "красный"
    note = "Элемент в массиве цветов яблока"

  [[fruit.color]]
    name = "зеленый"
    note = "Элемент в том же массиве, что и красный"

[[fruit]]
  name = "банан"

  [[fruit.color]]
    name = "желтый"
    note = "А этот тоже элемент массива цветов, но для банана"
```

Этот код в JSON выглядел бы так:

```json
{
  "fruit": [
    {
      "name": "яблоко",
      "geometry": { "shape": "круглый", "note": "..."},
      "color": [
        { "name": "красный", "note": "..." },
        { "name": "зеленый", "note": "..." }
      ]
    },
    {
      "name": "банан",
      "color": [
        { "name": "желтый", "note": "..." }
      ]
    }
  ]
}
```

### Дополнительные материалы

+ [Официальный репозиторий TOML](https://github.com/toml-lang/toml)
