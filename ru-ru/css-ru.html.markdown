---
language: css
contributors:
    - ["Mohammad Valipour", "https://github.com/mvalipour"]
    - ["Marco Scannadinari", "https://github.com/marcoms"]
    - ["Geoffrey Liu", "https://github.com/g-liu"]
translators:
    - ["Denis Malinochkin", "https://github.com/mrmlnc"]
filename: learncss-ru.css
lang: ru-ru
---

В первые годы веб не имел визуальных элементов и содержал только чистый текст. 
Но с дальнейшим развитием браузера также стали распространены полностью 
визуальные веб-страницы. CSS - это стандартный язык, который используется для 
разделения содержимого (HTML) и оформления (CSS) веб-страниц.

Проще говоря, CSS предоставляет нам синтаксис, с помощью которого можно 
обращаться к необходимым элементам на HTML-странице и назначать им различные 
визуальные свойства.

Как и любой другой язык CSS имеет множество версий. Здесь мы сосредоточимся
на версии CSS2.0, которая не самая последняя, но наиболее поддерживаемая и 
совместимая.

**Примечание:** Поскольку результат CSS - это некоторые визуальные эффекты, то 
для того, чтобы увидеть их - нужно использовать различные CSS площадки 
(песочницы), например, такие как [dabblet](http://dabblet.com/). Основное 
внимание в этой статье обращается на синтаксис и некоторые общие рекомендации.


```css
/* комментарии содержатся внутри конструкции слэш-звёздочка, как эта строка!
   здесь нет одностроковых комментариев; это единственный стиль комментариев */

/* ####################
   ## СЕЛЕКТОРЫ
   #################### */

/* Обычно, основное объявление в CSS очень простое */
селектор { свойство: значение; /* другие свойства...*/ }

/* селектор используется для обращения к элементу на странице.

Вы можете обратиться ко всем элементам используя звёздочку! */
* { color:red; }

/*
Допустим, что у нас есть элемент на странице:

<div class='some-class class2' id='someId' attr='value' />
*/

/* вы можете обратиться к нему по его имени */
.some-class { }

/* или по двум классам сразу! */
.some-class.class2 { }

/* или по имени самого элемента (тега) */
div { }

/* или по его идентификатору (id) */
#someId { }

/* или по атрибуту, который он имеет! */
[attr] { font-size:smaller; }

/* или по атрибуту, который имеет конкретное значение */
[attr='value'] { font-size:smaller; }

/* или по атрибуту, значение которого начинается с (CSS3) */
[attr^='val'] { font-size:smaller; }

/* или заканчивается на (CSS3) */
[attr$='ue'] { font-size:smaller; }

/* или даже содержит в себе (CSS3) */
[attr~='lu'] { font-size:smaller; }


/* и что ещё более важно, их можно объединять вместе -- между двумя различными 
   частями не должно быть пробелов, так как это делается для придания
   другого смысла */
div.some-class[attr$='ue'] { }

/* Вы можете также выбрать элемент в зависимости от его родителя. */

/* элемент, который является прямым потомком родителя (имеет такой же путь) */
div.some-parent > .class-name {}

/* или любой из элементов у родителя в дереве. Это означает, что любой элемент,
   который имеет класс "class-name" и его родителем является элемент div
   с классом "some-parent" в любой глубине */
div.some-parent .class-name {}

/* Внимание: этот же селектор без пробелов имеет другой смысл.
   Можешь объяснить какой? */
div.some-parent.class-name {}

/* можно также выбрать элемент идущий следом за "i-am-before" */
.i-am-before + .this-element { }

/* или все элементы идущие после "i-am-any-before" на одном уровне */
.i-am-any-before ~ .this-element {}

/* Существуют псевдоклассы, которые позволяют выбрать элемент, основываясь
   на его поведении, а не структуре страницы.  */

/* например, при наведении курсора на элемент */
selector:hover {}

/* или посещенная ссылка */
selected:visited {}

/* или не посещенная ссылка */
selected:link {}

/* или элемент, находящийся в фокусе */
selected:focus {}


/* ####################
   ## СВОЙСТВА
   #################### */

selector {
    
    /* Единицы */
    width: 50%; /* в процентах */
    font-size: 2em; /* умноженный текущий размер шрифта */
    width: 200px; /* в пикселах */
    font-size: 20pt; /* в пунктах */
    width: 5cm; /* в сантиметрах */
    min-width: 50mm; /* в миллиметрах */
    max-width: 5in; /* в дюймах. Есть вариации: max-(width|height) */
    height: 0.2vh; /* умноженная высота вьюпорта браузера (CSS3) */
    width: 0.4vw; /* умноженная ширина вьюпорта браузера (CSS3) */
    min-height: 0.1vmin; /* меньшее из вертикальных и горизонтальных размеров вьюпорта браузера (CSS3) */
    max-width: 0.3vmax; /* так же, как и выше, но большая из размерностей (CSS3) */
    
    /* Цвета */
    background-color: #F6E;  /* короткая запись в hex */
    background-color: #F262E2; /* полная запись в hex */
    background-color: tomato; /* может быть именованный цвет */
    background-color: rgb(255, 255, 255); /* в rgb */
    background-color: rgb(10%, 20%, 50%); /* в rgb процентах */
    background-color: rgba(255, 0, 0, 0.3); /* в полу-прозрачном rgb (CSS3) */
    background-color: transparent; /* прозрачный */
    background-color: hsl(0, 100%, 50%); /* hsl формат (CSS3). */
    background-color: hsla(0, 100%, 50%, 0.3); /* подобие RGBA (CSS3) */

    
    /* Изображения */
    background-image: url(/path-to-image/image.jpg); /* кавычки внутри url() не необязательны */
    
    /* Шрифты */
    font-family: Arial;
    /* если имя шрифта разделяется пробелом, то кавычки обязытельны */
    font-family: "Courier New";
    /* если первый шрифт не найден, то браузер будет искать другие шрифты */
    font-family: "Courier New", Trebuchet, Arial, sans-serif;
}

```

## Использование

Сохраните любой CSS код в файл с расширением `.css`.

```xml
<!-- Вам нужно подключить CSS файл на страницу в секции <head>: -->
<link rel='stylesheet' type='text/css' href='path/to/style.css' />

<!-- Вы также можете включать некоторый CSS в разметку.
     Однако, так делать настятельно не рекомендуется. -->
<style>
   a { color: purple; }
</style>

<!-- Можно добавлять свойства непосредственно к элементу.
     Но так делать ещё хуже - старайтесь избегать этого. -->
<div style="border: 1px solid red;">
</div>

```

## Приоритет

Как вы уже заметили, на элемент может ссылаться не только один селектор. 
Поэтому элемент может получать свойства от различных источников. 
В таких случаях значения свойств могут переопределяться в зависимости от веса 
применяемых к нему свойств селекторов.

Учитывая следующий CSS:

```css
/*A*/
p.class1[attr='value']

/*B*/
p.class1 {}

/*C*/
p.class2 {}

/*D*/
p {}

/*E*/
p { свойство: значение !important; }

```

и следующую разметку:

```xml
<p style='/*F*/ свойство:значение;' class='class1 class2' attr='value'>
</p>
```

Карта применяемых стилей по приоритету:
Помните, что приоритет распространяется не на весь блок, а на конкретное 
свойство.

* `E` имеет наивысший приоритет, так как имеет ключевое слово `!important`. 
  Рекомендуется избегать таких ситуаций, если в этом нет необходимости. 
* `F` идёт следующим, так как это встроенное свойство.
* `A` идёт следующим, так как более конкретно ссылается на элемент. Чем больше 
  селекторов, тем больше вес. Здесь три селектора: один тег `p` + 
  имя класса `class1` + один атрибут `attr='value'`.
* `C` и 'B' имеют одинаковый приоритет и последовательность зависит от
  их положения в таблице стилей.
* далее идёт `B`
* и замыкает `D`.

## Совместимость

Большинство функций в CSS2 (и некторые из CSS3) совместимы со всеми браузерами 
и устройствами. Но всегда жизненно важно иметь в виду совместимость вашего CSS 
и возможностей браузеров ваших пользователей.

[QuirksMode CSS](http://www.quirksmode.org/css/) один из лучших источников для этого.

Для выполнения быстрой проверки совместимости, [CanIUse](http://caniuse.com).

## Дополнительная литература

* [Understanding Style Precedence in CSS: Specificity, Inheritance, and the Cascade](http://www.vanseodesign.com/css/css-specificity-inheritance-cascaade/)
* [QuirksMode CSS](http://www.quirksmode.org/css/)
* [Z-Index - The stacking context](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context)
