---
category: tool
tool: git
contributors:
    - ["Jake Prather", "http://github.com/JakeHP"]
    - ["Leo Rudberg" , "http://github.com/LOZORD"]
    - ["Betsy Lorton" , "http://github.com/schbetsy"]
    - ["Bruno Volcov", "http://github.com/volcov"]
    - ["Andrew Taylor", "http://github.com/andrewjt71"]
    - ["Jason Stathopulos", "http://github.com/SpiritBreaker226"]
translators:
    - ["ShaltaevGleb", "https://github.com/ShaltaevGleb"]
filename: LearnGit-ru.txt
lang: ru-ru
---

# GIT

## Что это? Для чего это? Что возможно?

**Git** - это распределенная система управления версиями и исходным кодом.

Достигается это путем создания срезов проекта (snapshots), работая с этими
срезами, **Git** предоставляет функционал управления версиями и исходным кодом.

## Основные понятия

### В чем заключается контроль версий?

Контроль версий заключается в мониторинге объектов (файлов и директорий)
и записыванием всех происходящих с ними изменений.

### WAR (Распределенные) VS (Централизованные) системы контроля версий
- Централизованные фокусируются на синхронизации, отслеживании и
  резервном копировании
- Распределенные фокусируются на изменениях состояния, каждое изменение
  уникально и имеет свой **ID**
- В распределенных нет определенной жесткой структуры проекта

### Возможности GIT
- Автономность работы
- Легкая кооперация с другими
- Легкость ветвления
- Легкость слияния
- Высокая скорость работы
- Высокая гибкость работы

## Архитектура GIT

### Репозиторий

Набор файлов, каталогов, исторических записей, commit (срез изменения
состояния), и HEAD. Хранилище можно представьте себе, как структуры
данных исходного кода с дополнительным функционалом, позволяющим смотреть
истории изменения каждого элемента в системе.

Репозиторий Git состоит из каталога `.git` и рабочего каталога.

### Каталог `.git`

Каталог содержит файлы, необходимые для работы GIT

### Рабочий каталог

Основная директория работы

### Index (компонент `.git`)

Index - это основной плацдарм работы системы GIT. Это основной слой,
определяющий взаимодействие GIT с рабочим каталогом. Обеспечивает
гибкость взаимодействия разработчика с репозиторием, позволяет
контролировать вносимые изменения.

Также возможно иногда встречается синоним (в данном контексте) **сцена**

### Commit (Коммит)

Срез изменений, которые были совершены с момента предыдущего коммита.
Их можно опубликовать в другие репозитории, а можно и не публиковать.

### Branch (Ветвь)

Автоматически обновляемый указатель на последний сделанный commit.

### Tag (Маркер, метка)

Ссылка на определенный момент в истории проекта.
Например ссылка, на момент релиза.

### HEAD (компонент `.git`)

- Указатель на `commit` текущего ответвления
- Может быть только один активный (генеральный) `commit`
- Определяет ветвь, в которую вносится изменение - текущий `commit`
- Может быть любое число ответвлений

### Состояния GIT

- Modified (измененное) - в рабочей директории были произведены изменения,
  но они еще не были зафиксированы в GIT системе
- Staged (промежуточное) - процесс определения изменений, которые войдут
  в `commit`
- Committed (зафиксированное) - фиксация изменений, создание `commit`

## Команды GIT

### init
Создание пустого GIT репозитория

`$ git init`

### config
Настройка репозитория
```bash
$ git config --global user.email "MyEmail@Zoho.com"
$ git config --global user.name "My Name"
```

[Больше о настройках](http://git-scm.com/docs/git-config)

### help
Встроенная справка

```bash
# Быстрая проверка допустимых команд
$ git help

# Проверить все допустимые команды
$ git help -a

# Спецификации команд - пользовательский мануал
# git help <command_here>
$ git help add
$ git help commit
$ git help init
# или git <command_here> --help
$ git add --help
$ git commit --help
$ git init --help
```
### Игнорируемые файлы и директории
Обычно используется для указания временных или частных файлов, которые не
следует вносить в репозиторий. Без этого указания они могут в него попасть.
```bash
$ echo "temp/" >> .gitignore
$ echo "private_key" >> .gitignore
```

### status (статус - актуальное состояние)

```bash
# Покажет текущую ветвь, неотслеживаемые файлы, изменения
# и другие отличия, которые произошли с последнего commit
$ git status

# Справка по выводимой статусом информации
$ git help status
```

### add (добавление файла для отслеживания)

```bash
# Добавление файла из рабочего каталога
$ git add HelloWorld.java

# Добавление файла из определенной директории
$ git add /path/to/file/HelloWorld.c

# Поддерживаются регулярные выражения
$ git add ./*.java
```
Команда добавляет файл в отслеживание, но не перемещает файл

### branch (Ветвь)

Средство работы с ответвлениями

```bash
# Список существующих ответвлений
$ git branch -a

# Создание нового ответвления
$ git branch myNewBranch

# Удаление ответвления
$ git branch -d myBranch

# Переименование ответвления
# git branch -m <oldname> <newname>
$ git branch -m myBranchName myNewBranchName

# Редактирование описания ответвления
$ git branch myBranchName --edit-description
```

### tag (Работа с маркерами, метками)

```bash
# Список меток
$ git tag

# Создание метки с аннотацией
# Ключ -m позволяет прицепить к метке сообщение, которое хранится вместе с ней.
# Если сообщение не указано, то Git откроет редактор для его создания.
$ git tag -a v2.0 -m 'my version 2.0'

# Показ информации о теге
$ git show v2.0

# Залить изменения на сервер, с которого было сделано клонирование.
# Это возможно если у Вас есть права на запись в сервере,
# а также ни кто другой не делал push с тех пор как вы клонировали репозиторий
$ git push origin v2.0

# Заливка большого числа изменений по именам меток
$ git push origin --tags
```

### checkout

Обновляет все файлы в рабочем каталоге для соответствия какой-либо
ветви в репозитории

```bash
# Checkout - для основной ветви репозитория
$ git checkout

# Checkout - для какого-то ответвления
$ git checkout branchName

# Создание нового ответвления и переход в него
# эквивалентно "git branch <name>; git checkout <name>"
$ git checkout -b newBranch
```

### clone

Клонирование существующего репозитория в новый каталог.

```bash
# Клонирование репозитория
$ git clone https://URL/repo.git
# Клонирование только последнего среза
$ git clone --depth 1 https://URL/repo.git
# Клонирование конкретного ответвления
$ git clone -b <branch-name> https://URL/repo.git --single-branch
```

### commit

Создание commit - запись сцены в историю

```bash
# Создание commit
$ git commit -m "Added multiplyNumbers() function to HelloWorld.c"

# Автоматически добавить измененные или удаленные фалы,
# не включая новые файлы, и последующие создание commit
$ git commit -a -m "Modified foo.php and removed bar.php"

# Изменение описания последнего commit
$ git commit --amend -m "Correct message"
```

### diff (отличия)

Показывает отличия между версиями

```bash
# Показывает отличия между рабочей директорией и индексом (сценой)
$ git diff

# Показывает отличия между индексом (сценой) и исторической записью
$ git diff --cached

# Показывает отличия между рабочей директорией и исторической записью
$ git diff HEAD
```

### grep (поиск)

Позволяет производить быстрый поиск по репозиторию

Пример настройки:
```bash
# Выводить номера строк в поисковой выдаче
$ git config --global grep.lineNumber true

# Сделать результаты более читаемыми, группировать выдачу
$ git config --global alias.g "grep --break --heading --line-number"
```

Пример поиска:
```bash
# Поиск вхождения "variableName" во всех файлах .java
$ git grep 'variableName' -- '*.java'

# Поиск строк которые содержат "arrayListName" и, "add" или "remove"
$ git grep -e 'arrayListName' --and \( -e add -e remove \)
```

### log

Показывает commit репозитория

```bash
# Показать все commit
$ git log

# Показать только сообщения commit
$ git log --oneline

# Показать только сообщения из commit слияний
$ git log --merges

# Показать все commit представленные в виде ASCII графики
$ git log --graph
```

### merge

Слияния - это вливание изменений из одних ветвей в другую

```bash
# Слить ответвление с данным
$ git merge branchName

# Всегда генерировать merge commit когда происходит слияние
$ git merge --no-ff branchName
```

### mv

Переименовать или переместить файл

```bash
# Переименовать файл
$ git mv HelloWorld.c HelloNewWorld.c

# Переместить файл
$ git mv HelloWorld.c ./new/path/HelloWorld.c

# Силовое действие
# Если файл назначения существует в каталоге, то он будет переписан
$ git mv -f myFile existingFile
```

### pull

Получить изменения из репозитория

```bash
# Обновить локальный репозиторий, путем слияния с новыми изменениями
# из ветвей "origin" и "master".
# git pull <remote> <branch>
$ git pull origin master

# Обновить текущую ветвь путем вливания в нее изменений из
# удаленного репозитория той же ветви
$ git pull

# Получить изменения из другой ветви и влить
# ваши commit в локальном репозитории, как последующие
# Синоним: 
#"git pull <remote> <branch>; git rebase <branch>"
$ git pull origin master --rebase
```

### push

Влить локальные изменения в удаленную ветвь

```bash
# Из локального репозитория в удаленную ветвь с именем
# git push <remote> <branch>
$ git push origin master

# Из локальной версии ветви в удаленную версию той же ветви
$ git push

# Чтобы связать локальную ветвь с удаленной, добавьте -u флаг:
$ git push -u origin master
# Тогда в любое время когда вы захотите залить изменения из
№ локальной ветви в удаленную, можно будет сделать это сокращенно:
$ git push
```

### stash

Когда есть черновые изменения, но еще не достаточные для того чтобы
сделать commit, то возникает проблема с получением новых изменений
из удаленного репозитория, stash (тайник) призван решить это затруднение,
путем помещения всех изменений в тайник.

```bash
$ git stash
$ git pull
$ git status
# Нет ничего для commit

#Просмотр тайника
$git stash list

#Достать из тайника
$ git stash pop

#Сделать что-то с тайником
$ git stash apply
```

### rebase

Взять изменения из одной ветви и влить их в конец другой ветви
Стоит применять с большой осторожностью, только в том случае,
если знаешь, что делаешь

```bash
# Взять experimentBranch и влить изменения в master
# git rebase <basebranch> <topicbranch>
$ git rebase master experimentBranch
```

### reset

Откат состояния ветви до определенного в истории

```bash
# Откатить сцену, до состояния последнего commit
$ git reset

# Откатить сцену, до состояния последнего commit, а также 
# привести рабочий каталог, в соответствующее состояние
$ git reset --hard

# Откатить сцену, до состояния определенного commit
$ git reset 31f2bb1

# Откатить сцену, до состояния определенного commit, а также 
# привести рабочий каталог, в соответствующее состояние
$ git reset --hard 31f2bb1
```

### revert

Отмена определенного commit
Исключение изменений сделанных в данном commit

`$ git revert <commit>`

### rm

Удаление файла

```bash
# Только из отслеживания
$ git rm file --cached

# Из отслеживания и рабочего каталога 
$ git rm file -f
```
