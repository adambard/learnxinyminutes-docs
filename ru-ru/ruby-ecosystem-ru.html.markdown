---
category: tool
tool: ruby ecosystem
lang: ru-ru
filename: learnrubyecosystem-ru.rb
contributors:
    - ["Jon Smock", "http://github.com/jonsmock"]
    - ["Rafal Chmiel", "http://github.com/rafalchmiel"]
translators:
    - ["Artem Pyankov", "https://github.com/ibublik"]

---

Люди, использующие Ruby, имеют возможность устанавливать разные версии Ruby, управлять их пакетами (или гемами) и зависимостями этих гемов.

## Ruby-менеджеры

Некоторые платформы содержат предустановленный Ruby, либо дают возможность установить его как пакет. Но большинство рубистов не используют эти способы, либо используют лишь для того, чтобы запустить другой установщик или реализацию Ruby. Как правило, вместо этого рубисты используют Ruby-менеджеры для установки и переключения между различными версиями Ruby и рабочими окружениями их Ruby-проектов.

Вот список наиболее популярных менеджеов Ruby-окружения:

* [RVM](https://rvm.io/) - Устанавливает и переключает версии Ruby. RVM также поддерживает концепцию гемсетов для полной изоляции рабочих окружений.
* [ruby-build](https://github.com/sstephenson/ruby-build) - Только устанавливает версии Ruby. Используйте его для более гибкого контроля над исталляцией Ruby.
* [rbenv](https://github.com/sstephenson/rbenv) - Только переключает версии Ruby. Используется вместе с ruby-build. Применяйте для более гибкого контроля над запуском Ruby.
* [chruby](https://github.com/postmodern/chruby) - Только переключает версии Ruby. Близок по духу к rbenv. Не имеет представления об установке Ruby.

## Версии Ruby

Ruby был создан Юкихиро Мацумото (в сообществе его называют "Матц"), который остается кем-то вроде [ВПД](https://ru.wikipedia.org/wiki/%D0%92%D0%B5%D0%BB%D0%B8%D0%BA%D0%BE%D0%B4%D1%83%D1%88%D0%BD%D1%8B%D0%B9_%D0%BF%D0%BE%D0%B6%D0%B8%D0%B7%D0%BD%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9_%D0%B4%D0%B8%D0%BA%D1%82%D0%B0%D1%82%D0%BE%D1%80), хоть это это и меняется в последнее время. Как результат, основная реализация Ruby называется MRI (Matz' Reference Implementation), и когда вы слышите "версия Ruby", она указывает на версию релиза MRI.

Три наиболее часто используемых версии Ruby:

* 2.0.0 - Выпущена в феврале 2013 года. Большинство крупных библиотек и фреймворков поддерживают версию 2.0.0.
* 1.9.3 - Выпущена в октябре 2011 года. Это самая часто используемая рубистами версия на текущий момент.
* 1.8.7 - Ruby 1.8.7 была официально признана [устаревшей](http://www.ruby-lang.org/en/news/2013/06/30/we-retire-1-8-7/).

Изменения между версиями 1.8.7 и 1.9.x намного значительнее, чем между 1.9.3 и 2.0.0. Например, релизы серии 1.9 представили кодировки и байт-кодовую виртуальную машину. До сих пор существуют проекты, использующие версию 1.8.7, но их число все уменьшается, ведь большая часть сообщества перешла хотя бы на версии 1.9.2 или 1.9.3.

## Реализации Ruby

Экосистема Ruby имеет счастье быть представленной в разных реализациях Ruby, каждая со своими уникальными преимуществами и степенью совместимости. Чтобы внести ясность, различные реализации написаны на разных языках, но *все они являются Ruby*. Каждая реализация имеет свои нюансы и дополнительные особенности, но все они справляются с исполнением обычных Ruby-скриптов. Например, JRuby написана на Java, но вам не требуется знать Java для ее использования.

Самые развитые/совместимые:

* [MRI](https://github.com/ruby/ruby) - Написана на C, это основная реализация Ruby. По определению, она 100% совместима (с самой собой). Все остальные реализации поддерживают совместимось с MRI (см. [RubySpec](#rubyspec) ниже).
* [JRuby](http://jruby.org/) - Написана на Java и Ruby, эта грамотная реализация имеет неплохое быстродействие.
* [Rubinius](http://rubini.us/) - Написана,в основном, на самом Ruby и C++ для реализации байт-кодовой ВМ. Также является довольно развитой и быстрой. Т.к. она реализована на самом Ruby, она привносит множество особенностей ВМ в мир Ruby.

Средне развитые/совместимые:

* [Maglev](http://maglev.github.io/) - Создана на основе Gemstone, виртуальной машине Smalltalk. Smalltalk содержит впечатляющий инструментарий, и этот проект старается привнести его в Ruby-разработку.
* [RubyMotion](http://www.rubymotion.com/) - Привносит Ruby в iOS разработку.

Менее развитые/совместимые:

* [Topaz](http://topazruby.com/) - Написана на (с использованием инструментов PyPy), Topaz откровенно молодая и не особо совместимая реализация. Она обещает стать очень высоко-производительной реализацией Ruby.
* [IronRuby](http://ironruby.net/) - Написана на C# с упором на платформу .NET. Похоже, что работа над IronRuby приостановилась, как только Microsoft прекратила поддержку.

Реализации Ruby могут иметь свою собственную нумерацию версиий релизов, но все они нацелены на совместимость с определенной версией MRI. Многие реализации имеют возможность переходить в другие режимы (например, режимы 1.8 или 1.9) для указания на какую версию MRI следует нацелиться.

## RubySpec

Большинство реализаций Ruby полностью полагаются на [RubySpec](http://rubyspec.org/). Ruby не имеет официальной спецификации, так что сообщество написало исполняемые спецификации на Ruby для проверки совместимости реализаций с MRI.

## RubyGems

[RubyGems](http://rubygems.org/) - это поддерживаемый сообществом менеджер пакетов для Ruby. RubyGems поставляется с Ruby, так что нет необходимости загружать его отдельно.

Пакеты Ruby называются "гемами", они могут хоститься сообществом на RubyGems.org. Каждый гем содержит свой исходный код и некоторые метаданные, включая информацию вроде версии, зависимостей, автора(ов) и лицензий.

## Bundler

[Bundler](http://bundler.io/) - это менеджер управления гемами. Он использует внутри проекта Gemfile для поиска зависимостей, а затем просматривает зависимости этих зависимостей рекурсивно. Он делает это до тех пор, пока все зависимости не будут разрешены и загружены, или остановится если был обнаружен конфликт.

Bundler вызовет ошибку, если он найдет конфликтующую зависимость. Например, если гем A требует наличие версии 3 или выше гема Z, но гем B требует версию 2, Bundler уведомит вас об этом конфликте. Это становится невроятно полезным, ведь многие гемы используют другие гемы (которые используют другие гемы), что может сформировать огромный сложноразрешимый граф зависимостей.

# Тестирование

Тестирования - важная часть Ruby-культуры. Ruby поставляется с собственным модульным фреймворком для тестирования, называемым Minitest (или TestUnit для версий Ruby 1.8.x). Существует множество фреймворков для тестирования для различных целей.

* [TestUnit](http://ruby-doc.org/stdlib-1.8.7/libdoc/test/unit/rdoc/Test/Unit.html) - встроенный в Ruby 1.8.x модульный фреймворк для тестирования Ruby
* [minitest](http://ruby-doc.org/stdlib-2.0.0/libdoc/minitest/rdoc/MiniTest.html) - встроенный в Ruby 1.9/2.x фреймворк для тестирования
* [RSpec](http://rspec.info/) - фреймворк для тестирования, нацеленный на выразительность тестов
* [Cucumber](http://cukes.info/) - BDD-фреймворк для тестирования, парсящий Gherkin-форматированные тесты

## Будьте дружелюбны

Ruby-сообщество гордится своей открытостью, разнообразием и доброжелательностью. Сам Матц невероятно дружелюбен, и великодушие рубистов в целом просто потрясающе.
